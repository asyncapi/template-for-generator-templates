// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateExtraFormats() generated correct index.html with diagram source 1`] = `
"<!-- Import of specific macro function from a file from partials directory -->


<!-- If you have some information that you want to use in the template more than once, you can set a variable and reuse it
Important to notice here is how the title of the AsyncAPI document is accessed. It is not protected from situation that \\"info\\" or \\"title\\" 
are not provided in the document because there are among not many required fields. 
To read more about Nunjuck's Tag called set go to https://mozilla.github.io/nunjucks/templating.html#set -->


<!DOCTYPE html>
<html lang=\\"en\\">

<head>
    <meta charset=\\"utf-8\\">
    <link href=\\"https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css\\" rel=\\"stylesheet\\">
    <link rel=\\"stylesheet\\" type=\\"text/css\\" href=\\"style.css\\">
</head>

<body>
    <div class=\\"container mx-auto px-4\\">        
        <p> 
            <!-- Below you can see how you access variable's value with double curly braces -->
            <h1>Dummy example with all spec features included</h1>
            <!-- Below you can see how you macro reusable chunks are called -->
            
<h2>
  Channels that you can subscribe to
</h2>
<hr />
<br />
<div class=\\"container mx-auto px-8\\">
  <ul class=\\"list-disc\\"></ul>
    
      
          
      
    
      
           
              <li><strong>dummy/channel/without/parameter</strong></li>
          
      
    
  </ul>
</div>

            
<h2>
  Channels that you can publish to
</h2>
<hr />
<br />
<div class=\\"container mx-auto px-8\\">
  <ul class=\\"list-disc\\"></ul>
    
       
           
              <li><strong>dummy/channel/with/{dummy}/parameter/create</strong></li>
          
      
    
       
          
      
    
  </ul>
</div>

            <!-- Below you can see how reusable parts of template are included in a template file -->
            <!-- Notice how to specify multiple conditions with \\"and\\" instead of \\"&&\\" 
Notice how it is checked if schemas are provided \\"asyncapi.components().schemas()\\". It is risky because
schemas object can still be empty. It would be better if something like this would be possible \\"asyncapi.components().hasSchemas()\\"
Always when you see something useful could be added to the API of parsed AsyncAPI document, please create an issue 
https://github.com/asyncapi/parser-js/issues -->

    <h2>Schemas</h2>
    <hr>
    You have the following schemas named in components section:
    <div class=\\"container mx-auto px-8\\">
        <ul class=\\"list-disc\\">
            <!-- Usage of build-in \\"dictsort\\" Nunjucks filter for sorting items alphabetically 
            and how it works in a for loop -->
            
                <!-- Declare variables for values that you use more than once, just like you do with regular code -->
                
                <li> <a href=\\"schemas/dummyArray-example.html\\">dummyArray</a></li>
            
                <!-- Declare variables for values that you use more than once, just like you do with regular code -->
                
                <li> <a href=\\"schemas/dummyCreated-example.html\\">dummyCreated</a></li>
            
                <!-- Declare variables for values that you use more than once, just like you do with regular code -->
                
                <li> <a href=\\"schemas/dummyInfo-example.html\\">dummyInfo</a></li>
            
                <!-- Declare variables for values that you use more than once, just like you do with regular code -->
                
                <li> <a href=\\"schemas/dummyObject-example.html\\">dummyObject</a></li>
            
                <!-- Declare variables for values that you use more than once, just like you do with regular code -->
                
                <li> <a href=\\"schemas/dummyRecursiveObject-example.html\\">dummyRecursiveObject</a></li>
            
                <!-- Declare variables for values that you use more than once, just like you do with regular code -->
                
                <li> <a href=\\"schemas/sentAt-example.html\\">sentAt</a></li>
            
        </ul>
    </div>
    <!-- Usage of template custom filter -->
    <div class=\\"mermaid\\">
        classDiagram
class dummyCreated {
          prop1 integer
prop2 string
sentAt string
dummyArray array
dummyObject object
}
          dummyCreated --|&gt; sentAt
dummyCreated --|&gt; dummyArray
dummyCreated --|&gt; dummyObject

class sentAt {
          string}
          
class dummyArray {
          array}
          dummyArray --|&gt; dummyInfo

class dummyInfo {
          prop1 string
sentAt string
}
          dummyInfo --|&gt; sentAt

class dummyObject {
          dummyObjectProp1 string
dummyObjectProp2 [CIRCULAR] object
}
          dummyObject --|&gt; sentAt
dummyObject --|&gt; dummyRecursiveObject

class dummyRecursiveObject {
          dummyRecursiveProp1 [CIRCULAR] object
dummyRecursiveProp2 string
}
          dummyRecursiveObject --|&gt; dummyObject


    </div>

            <!-- This is an example how you can access values from AsyncAPI file from its extensions -->
            Share your feedback with us on <a href=\\"http://twitter.com/@AsyncAPISpec\\">Twitter</a>. 
            
                <!-- You can see chaining of filters here, where one value is processed by two filters, one after another -->
                Don't forget to visit our website <a href=\\"https://www.asyncapi.com\\">https://www.asyncapi.com</a>.
            
        </p> 
    </div>
    <script src=\\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\\"></script>
    <script>
        mermaid.initialize({
            startOnLoad: true,
            /*
             * You can access \\"maxTextSide\\" parameter value without any conditions in case user did not provide such a parameter. 
             * It is possible thanks to the functionality that makes it possuble for template developer to specify default values for parameters.
             * Check out package.json file and look for generator.parameters.maxTextSize and its description and default value.
             */
            maxTextSize: 50000
        });
    </script>
</body>

</html>"
`;
